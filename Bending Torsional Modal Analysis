clc; clear; close all;

%% Beam Properties
L_total = 5;              % Total length (m)
n_elem = 5;
n_nodes = n_elem + 1;
dof_per_node = 2;         % vertical + torsional
total_dof = n_nodes * dof_per_node;
L = L_total / n_elem;

% Material and Geometry
E = 70e9;                 % Young's modulus (Pa)
rho = 2700;               % Density (kg/m^3)
A = 0.01;                 % Cross-sectional area (m^2)
I = 8.5e-6;               % Moment of inertia (bending)
J = 1.2e-5;               % Polar moment of inertia (torsion)
nu = 0.33;                % Poisson's ratio
G = E / (2*(1+nu));       % Shear modulus

x_nodes = linspace(0, L_total, n_nodes);

%% Element Matrices

% Bending stiffness (2x2)
K_bend = (E*I/L^3) * [12 -6*L;
                     -6*L 4*L^2];

% Torsional stiffness (2x2)
K_torsion = (G*J/L) * [1 -1;
                      -1  1];

% Bending mass matrix (2x2)
M_bend = (rho*A*L/420) * [156 22*L;
                          22*L  4*L^2];

% Torsional mass matrix (2x2)
M_torsion = (rho*J*L/6) * [2 1;
                           1 2];

% Element stiffness and mass (4x4)
K_elem = zeros(4); M_elem = zeros(4);
K_elem(1:2,1:2) = K_bend;
K_elem(3:4,3:4) = K_torsion;

M_elem(1:2,1:2) = M_bend;
M_elem(3:4,3:4) = M_torsion;

%% Global Assembly
K = zeros(total_dof);
M = zeros(total_dof);

for e = 1:n_elem
    dof_map = [(e-1)*2+1, (e-1)*2+2, e*2+1, e*2+2];  % 4 DOFs per element
    K(dof_map, dof_map) = K(dof_map, dof_map) + K_elem;
    M(dof_map, dof_map) = M(dof_map, dof_map) + M_elem;
end

%% Apply boundary conditions (fixed at node 1: both vertical + torsion)
fixed_dofs = [1 2];  % first node's 2 DOFs
free_dofs = setdiff(1:total_dof, fixed_dofs);
K_reduced = K(free_dofs, free_dofs);
M_reduced = M(free_dofs, free_dofs);

%% Solve Generalized Eigenvalue Problem
[phi, omega_sq] = eig(K_reduced, M_reduced);
omega = sqrt(diag(omega_sq));
freq_Hz = omega / (2*pi);

% Normalize
phi = phi ./ max(abs(phi));

%% Print Modal Summary
fprintf('\n--- Modal Summary Table (Bending + Torsion) ---\n');
fprintf('| Mode # | Frequency (Hz) |\n');
fprintf('|--------|----------------|\n');
for i = 1:length(freq_Hz)
    fprintf('|   %2d   |     %7.2f    |\n', i, freq_Hz(i));
end

%% Animate Selected Modes
x_nodes_fine = linspace(0, L_total, 200);
t = linspace(0, 2*pi, 60);
mode_to_plot = 1:6;  % plot first 6 modes

for mode = mode_to_plot
    shape_full = zeros(n_nodes, 2);  % [vertical, torsion]
    for i = 1:n_nodes
        d = (i-1)*2;
        if ismember(d+1, free_dofs)
            idx_v = find(free_dofs == d+1);
            shape_full(i,1) = phi(idx_v, mode);
        end
        if ismember(d+2, free_dofs)
            idx_t = find(free_dofs == d+2);
            shape_full(i,2) = phi(idx_t, mode);
        end
    end

    shape_full = shape_full / max(abs(shape_full(:,1)));  % normalize for scale

    % Animate
    figure('Color', 'w');
    for ti = 1:length(t)
        clf;
        amp = sin(t(ti));
        y_anim = interp1(x_nodes, amp * shape_full(:,1)', x_nodes_fine, 'spline');
        theta_anim = interp1(x_nodes, amp * shape_full(:,2)', x_nodes_fine, 'spline');

        % Visualize as a wing span with twist (torsion as tilt)
        for i = 1:length(x_nodes_fine)
            y = y_anim(i);
            theta = theta_anim(i);
            wing_width = 0.2;
            x_wing = [-wing_width/2, wing_width/2];
            y_wing = y + x_wing * sin(theta);  % add torsional twist

            plot(x_wing + x_nodes_fine(i), [y_wing(1), y_wing(2)], 'k-', 'LineWidth', 2); hold on;
        end

        title(['Mode ', num2str(mode), ' - ', num2str(freq_Hz(mode), '%.2f'), ' Hz']);
        xlim([0 L_total]); ylim([-1.5 1.5]);
        xlabel('Wing Span (m)'); ylabel('Displacement + Twist');
        grid on;
        pause(0.01);
    end
end

